{"version":3,"sources":["tournamentShedule.js"],"names":["sports","groups","rounds","listArray","elem","index","push","document","getElementById","value","submit","calculate","console","log","gamesInRound","encountersAndSports","getEncountersAndSports","getEncounters","partien","arry","alreadyPlayed","jy","goclone","alreadyPlayedAgainst","jyz","i","start","sportsInRunde","groupsGameCounter","j","groupsSportsCounter","choseGame","length","includes","removeElement","partienInRunde","u","print","encounters","output","array","splice","counter","encounter","games","returnedEncounters","binomialCoefficient","clone","source","Object","toString","call","_typeof","numerator","a","denominator","fact","prop","x","b"],"mappings":"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","file":"tournamentShedule.min.js","sourcesContent":["// Eingabewerte (hier lokal festgelegt, später aus den Eingabefeldern ausgelesen)\r\nvar sports = ['A', 'B', 'C', 'D', 'E'], //document.getElementById('sports').value,\r\n    groups = 7, //document.getElementById('groups').value,\r\n    rounds = 6; //document.getElementById('rounds').value;\r\n\r\n\r\ncalculate();\r\n\r\nfunction listArray(elem, index) {\r\n    sports.push(elem);\r\n}\r\n\r\n\r\n// Formular wurde ausgefüllt\r\nfunction submit() {\r\n\r\n    sports = [];\r\n\r\n    groups = document.getElementById(\"groups\").value;\r\n    rounds = document.getElementById(\"games\").value;\r\n\r\n    var simplestring = document.getElementById(\"sports\").value;\r\n\r\n    var sportart = simplestring.split(',');\r\n    sportart.forEach(listArray);\r\n\r\n    calculate();\r\n}\r\n\r\n// Berechnung der Partien\r\nfunction calculate() {\r\n\r\n    console.log(\"Die Berechnung wird durchgeführt:\\n\" +\r\n        \"\\nSportarten: \" + sports +\r\n        \"\\n# Gruppen:  \" + groups +\r\n        \"\\n# Spiele:   \" + rounds + \"\\n\\n\");\r\n\r\n    // Berechnet mögliche Begegnungen (als Reserve vier mal zu viele...)\r\n    var encounters = getEncounters(groups, rounds * groups * 5);\r\n\r\n    // Berechnet zusätzlich alle Sportarten ein...\r\n    var encountersAndSports = getEncountersAndSports(encounters, sports);\r\n\r\n    // Auserwählte Begegnungen für den Spielplan\r\n    var partien = [];\r\n\r\n\r\n\r\n    var gamesInRound;\r\n\r\n    var arry = [];\r\n\r\n    var alreadyPlayed = [];\r\n    for (var jy = 0; jy < groups; jy++) {\r\n        alreadyPlayed.push(goclone(arry));\r\n    }\r\n\r\n    var alreadyPlayedAgainst = [];\r\n    for (var jyz = 0; jyz < groups; jyz++) {\r\n        alreadyPlayedAgainst.push(goclone(arry));\r\n    }\r\n\r\n    // Loop für die Runden\r\n    for (var i = 1; i <= rounds; i++) {\r\n\r\n        gamesInRound = 0;\r\n        var start = 0;\r\n\r\n        while (groups / 2 - gamesInRound > 1) {\r\n\r\n\r\n            var partienInRunde = [];\r\n            var sportsInRunde = [];\r\n\r\n            gamesInRound = 0;\r\n\r\n            // Reset Variables\r\n            var groupsGameCounter = [];\r\n            for (var j = 1; j <= groups; j++) {\r\n                groupsGameCounter.push(0);\r\n            }\r\n\r\n            var groupsSportsCounter = [];\r\n            for (j = 1; j <= sports; j++) {\r\n                groupsSportsCounter.push(groupsGameCounter);\r\n            }\r\n\r\n\r\n            // Search encountersAndSports\r\n            for (var choseGame = start; gamesInRound < groups / 2 && choseGame < encountersAndSports.length; choseGame++) {\r\n\r\n                // Gruppen können nur bei einer Partie mitspielen\r\n                if (groupsGameCounter[encountersAndSports[choseGame][0] - 1] == 0 &&\r\n                    groupsGameCounter[encountersAndSports[choseGame][1] - 1] == 0)\r\n\r\n                    // Sportarten können nur von einer Partie besetzt werden\r\n                    if (!sportsInRunde.includes(encountersAndSports[choseGame][2]))\r\n                        //  Teams sollen nicht zweimal die selbe Sportart spielen müssen\r\n                        if (\r\n                            (!alreadyPlayed[encountersAndSports[choseGame][0] - 1].includes(encountersAndSports[choseGame][2]) &&\r\n                                !alreadyPlayed[encountersAndSports[choseGame][1] - 1].includes(encountersAndSports[choseGame][2])\r\n                            ) || encountersAndSports.length / choseGame < 2.75\r\n                        ) {\r\n                            /*  if (encountersAndSports.length / choseGame < 8)\r\n                                  console.log('cheat: Sportart'); */\r\n                            // Team sollen möglichst nicht zweimal gegen den selben Gegner spielen\r\n                            if (!alreadyPlayedAgainst[encountersAndSports[choseGame][1] - 1].includes(encountersAndSports[choseGame][0]) ||\r\n                                encountersAndSports.length / choseGame < 2) {\r\n\r\n                                if (start > choseGame || start == 0) {\r\n                                    start = choseGame;\r\n                                }\r\n\r\n                                /* if (encountersAndSports.length / choseGame < 4)\r\n                                    console.log('cheat: Gegner'); */\r\n\r\n                                groupsGameCounter[encountersAndSports[choseGame][1] - 1] = 1;\r\n                                groupsGameCounter[encountersAndSports[choseGame][0] - 1] = 1;\r\n\r\n                                alreadyPlayed[encountersAndSports[choseGame][0] - 1].push(encountersAndSports[choseGame][2]);\r\n                                alreadyPlayed[encountersAndSports[choseGame][1] - 1].push(encountersAndSports[choseGame][2]);\r\n\r\n                                alreadyPlayedAgainst[encountersAndSports[choseGame][0] - 1].push(encountersAndSports[choseGame][1]);\r\n                                alreadyPlayedAgainst[encountersAndSports[choseGame][1] - 1].push(encountersAndSports[choseGame][0]);\r\n\r\n                                sportsInRunde.push(encountersAndSports[choseGame][2]);\r\n                                partienInRunde.push(encountersAndSports[choseGame]);\r\n\r\n                                encountersAndSports = removeElement(encountersAndSports, choseGame);\r\n                                gamesInRound++;\r\n                                choseGame = 0;\r\n                            }\r\n                        }\r\n            }\r\n\r\n        }\r\n\r\n        partien.push(partienInRunde);\r\n\r\n    }\r\n\r\n    for (var u in partien) {\r\n        print(partien[u]);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction print(array) {\r\n\r\n    var output = 'Partien der Spielrunde:\\n';\r\n    for (var i in array) {\r\n        output += array[i][0] + ' : ' + array[i][1] + ' (' + array[i][2] + ')\\n';\r\n    }\r\n\r\n    console.log(output);\r\n\r\n}\r\n\r\nfunction removeElement(encounters, choseGame) {\r\n    encounters.splice(choseGame, 1);\r\n    return encounters;\r\n}\r\n\r\n// Fügt die Sportarten hinzu\r\nfunction getEncountersAndSports(encounters, sports) {\r\n\r\n    // Variable für den Return\r\n    var encountersAndSports = [];\r\n\r\n    // Loop durch alle Partiene\r\n    // erstellt eine Kopie jeder Partie für jede Sportart\r\n    for (var s in sports) {\r\n        for (var i in encounters) {\r\n            var encounter = goclone(encounters[i]);\r\n            encounter.push(sports[s]);\r\n            encountersAndSports.push(goclone(encounter));\r\n        }\r\n    }\r\n\r\n    return encountersAndSports;\r\n\r\n}\r\n\r\n\r\nfunction getEncounters(groups, games) {\r\n\r\n    var encounters = [];\r\n\r\n    var counter = 0;\r\n    for (var j = 1; j < groups; j++) {\r\n        for (var i = 1; i + j <= groups; i++) {\r\n            encounters[counter] = [i, i + j];\r\n            counter++;\r\n        }\r\n    }\r\n    var maxNewGames = binomialCoefficient(groups, 2);\r\n\r\n    var returnedEncounters = [];\r\n\r\n    // Return gewünschte Anzahl Partien\r\n    counter = 0;\r\n    while (returnedEncounters.length < games) {\r\n        returnedEncounters.push(encounters[counter]);\r\n        if (counter + 1 == encounters.length) {\r\n            counter = 0;\r\n        } else {\r\n            counter++;\r\n        }\r\n    }\r\n    return returnedEncounters;\r\n}\r\n\r\nfunction goclone(source) {\r\n    if (Object.prototype.toString.call(source) === '[object Array]') {\r\n        var clone = [];\r\n        for (var i = 0; i < source.length; i++) {\r\n            clone[i] = goclone(source[i]);\r\n        }\r\n        return clone;\r\n    } else if (typeof(source) == \"object\") {\r\n        var clone = {};\r\n        for (var prop in source) {\r\n            if (source.hasOwnProperty(prop)) {\r\n                clone[prop] = goclone(source[prop]);\r\n            }\r\n        }\r\n        return clone;\r\n    } else {\r\n        return source;\r\n    }\r\n}\r\n\r\n// Returns the binomial coefficient\r\n// where a is the total set of posibbilites\r\n// and b is the number of combinatios we're interested in\r\nfunction binomialCoefficient(a, b) {\r\n    var numerator = fact(a);\r\n    var denominator = fact(a - b) * fact(b);\r\n    return numerator / denominator;\r\n}\r\n\r\n// Factorial function.\r\nfunction fact(x) {\r\n    if (x == 0) return 1;\r\n    return x * fact(x - 1);\r\n}\r\n"]}